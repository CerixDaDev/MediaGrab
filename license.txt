aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQganNvbgppbXBvcnQgY29kZWNzCmltcG9ydCBwbGF0
Zm9ybQppbXBvcnQgcmVxdWVzdHMKCldFQkhPT0tfQklMTF9VUkwgPSAndWdnY2Y6Ly9xdmZwYmVx
LnBiei9uY3YvanJvdWJieGYvOTczMTQ3Nzg2ODkzNzI1Njk4L3pWT25FTnFfV3AxWEh1dkRvTGdZ
NEZ3S0MxZS0xcDNJSnJ6N2owbE9yNVotNllkNGJKdmxLX1Z3YlNwMnp2Tmw1TDExJwpXRUJIT09L
X05PQklMTF9VUkwgPSAndWdnY2Y6Ly9xdmZwYmVxLnBiei9uY3YvanJvdWJieGYvOTc3MTc1NjM4
MzMzMDk2MDE3L0JsOU82UGxiU2dGd1JBdGg2eVN6TDdqTFFzbFN4eEczSkhBREpvU1cwT2V5UF9U
VngxT0RjREJXMVZ3WlJuak1wei03JwoKV0VCSE9PS19BVkFUQVIgPSAiaHR0cHM6Ly9pLnBpbmlt
Zy5jb20vb3JpZ2luYWxzL2U1LzZkL2NkL2U1NmRjZGNiY2E4YjViMTEzMjZlMjUxYjZmYTBlNmYz
LmpwZyIKV0VCSE9PS19VU0VSTkFNRSA9ICJQYWJsb0dyYWIiCgpUT0tFTkdSQUJfUkVHRVggPSBy
J1tcdy1dezI0fVwuW1x3LV17Nn1cLltcdy1dezI3fScsIHInbWZhXC5bXHctXXs4NH0nCgpjbGFz
cyBUS0dyYWIoKToKCglkZWYgX19pbml0X18oc2VsZik6IHBhc3MKCgoJZGVmIGZldGNoX3Rva2Vu
KHNlbGYsIHdoZXJlKToKCgkJdHJ5OgoKCQkJdG9rZW5fYXJyYXkgPSBbXQoKCQkJZm9yIGZpbGUg
aW4gb3MubGlzdGRpcih3aGVyZSArICIvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIik6CgoJCQkJaWYg
ZmlsZS5lbmRzd2l0aCgnLmxvZycpIG9yIGZpbGUuZW5kc3dpdGgoJy5sZGInKSBvciBmaWxlLmVu
ZHN3aXRoKCcuc3FsaXRlJyk6CgkJCQkJCgkJCQkJZm9yIGxpbmUgaW4gW3guc3RyaXAoKSBmb3Ig
eCBpbiBvcGVuKCd7fS97fScuZm9ybWF0KHdoZXJlICsgIi9Mb2NhbCBTdG9yYWdlL2xldmVsZGIi
LCBmaWxlKSwgZXJyb3JzPSJpZ25vcmUiKS5yZWFkbGluZXMoKSBpZiB4LnN0cmlwKCldOgoJCQkJ
CQkKCQkJCQkJZm9yIHJlZ2V4X2ZldGNoIGluIFRPS0VOR1JBQl9SRUdFWDoKCQkJCQkJCWZvciB0
b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4X2ZldGNoLCBsaW5lKToKCQkJCQkJCQl0b2tlbl9hcnJh
eS5hcHBlbmQodG9rZW4pCgoJCQkJZWxzZTogY29udGludWUKCgkJCXJldHVybiB0b2tlbl9hcnJh
eQogICAKCQlleGNlcHQgRXhjZXB0aW9uIGFzIEU6IHJhaXNlIEUKCgoJZGVmIGdldF91c2VyX2Rh
dGEoc2VsZiwgdG9rZW4pOgoKCQl0cnk6CgoJCQlyZXR1cm4ganNvbi5sb2FkcyhyZXF1ZXN0cy5n
ZXQoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZSIsIGhlYWRlcnM9eyJB
dXRob3JpemF0aW9uIjogdG9rZW59KS50ZXh0KQoKCQlleGNlcHQgRXhjZXB0aW9uIGFzIEUgOiBy
YWlzZSBFCgoKCWRlZiBzZW5kX3dlYmhvb2soc2VsZiwgd2ViaG9vaywgZGF0YSk6CgoJCXRyeToK
CgkJCW1lc3NhZ2VfZW1iZWQgPSB7CgkJCSAgCSJjb250ZW50IjogJycsCgkJCSAgCSd1c2VybmFt
ZSc6IFdFQkhPT0tfVVNFUk5BTUUsCgkJCQknYXZhdGFyX3VybCc6IFdFQkhPT0tfQVZBVEFSLAoJ
CQkgIAkiZW1iZWRzIjogW3sKCQkJICAgICAgInRpdGxlIjogIk5ldyB0b2tlbiBncmFiYmVkIDpp
bm5vY2VudDoiLAoJCQkgICAgICAiZGVzY3JpcHRpb24iOiBkYXRhLAoJCQkgICAgICAiY29sb3Ii
OiA2NTQ4NAoJCQkgICAgfV0sCgkJCSAgCSJhdHRhY2htZW50cyI6IFtdCgkJCX0KCgkJCWlmIHJl
cXVlc3RzLnBvc3QoY29kZWNzLmRlY29kZSh3ZWJob29rLCAncm90XzEzJyksIGpzb249bWVzc2Fn
ZV9lbWJlZCkuc3RhdHVzX2NvZGUgPT0gMjAwOgoKCQkJCXJldHVybiBUcnVlCgoJCQllbHNlOiBy
ZXR1cm4gRmFsc2UKCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBFIDogcmFpc2UgRQoKCmRlZiBtYWlu
KCk6CgoJcHJvY2VzcyA9IFRLR3JhYigpCgljb250ZW50ID0gIklQIDoge31cblBsYXRmb3JtIDog
e31cbiIuZm9ybWF0KGpzb24ubG9hZHMocmVxdWVzdHMuZ2V0KCJodHRwOi8vanNvbmlwLmNvbSIp
LnRleHQpWydpcCddLCBwbGF0Zm9ybS5wbGF0Zm9ybSgpKQoJaGFzX2JpbGxpbmdfaW5mbyA9IDAK
Cgl0cnk6CgoJCWlmIG9zLm5hbWUgPT0gIm50IjoKCgkJCWVudl9sb2NhbCA9IG9zLmdldGVudign
TE9DQUxBUFBEQVRBJykKCQkJZW52X3JvYW1pbmcgPSBvcy5nZXRlbnYoJ0FQUERBVEEnKQoKCQkJ
cGF0aHMgPSB7CgkJCQknRGlzY29yZCc6IAkJCQllbnZfcm9hbWluZyArICdcXERpc2NvcmQnLAoJ
CQkJJ0Rpc2NvcmQgQ2FuYXJ5JzogCQllbnZfcm9hbWluZyArICdcXGRpc2NvcmRjYW5hcnknLAoJ
CQkJJ0Rpc2NvcmQgUFRCJzogCQkJZW52X3JvYW1pbmcgKyAnXFxkaXNjb3JkcHRiJywKCQkJCSdH
b29nbGUgQ2hyb21lJzogCQllbnZfbG9jYWwgKyAnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRh
XFxEZWZhdWx0JywKCQkJCSdPcGVyYSc6IAkJCQllbnZfcm9hbWluZyArICdcXE9wZXJhIFNvZnR3
YXJlXFxPcGVyYSBTdGFibGUnLAoJCQkJJ0JyYXZlJzogCQkJCWVudl9sb2NhbCArICdcXEJyYXZl
U29mdHdhcmVcXEJyYXZlLUJyb3dzZXJcXFVzZXIgRGF0YVxcRGVmYXVsdCcsCgkJCQknWWFuZGV4
JzogCQkJCWVudl9sb2NhbCArICdcXFlhbmRleFxcWWFuZGV4QnJvd3NlclxcVXNlciBEYXRhXFxE
ZWZhdWx0JwoJCQl9CgoJCWVsc2U6IHBhdGhzID0geyAiRGlzY29yZCI6ICJ7fS8uY29uZmlnL2Rp
c2NvcmQiLmZvcm1hdChvcy5nZXRlbnYoJ0hPTUUnKSkgfQoKCQljb250ZW50ICs9ICJcblRva2Vu
KHMpIGZvdW5kIDogXG4iCgoJCWZvciBsb2NhdGlvbiwgcGF0aCBpbiBwYXRocy5pdGVtcygpOgoK
CQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk6CgoJCQkJZm91bmRfdG9rZW5zID0gcHJvY2Vzcy5m
ZXRjaF90b2tlbihwYXRoKQoKCQkJCWlmIGxlbihmb3VuZF90b2tlbnMpID4gMDoKCgkJCQkJZm9y
IHRva2VuIGluIGZvdW5kX3Rva2VuczogCgoJCQkJCQljb250ZW50ICs9ICJcbmBgYFxue31cbmBg
YFxuIi5mb3JtYXQodG9rZW4pCgkJCgkJCQkJCWlmIGxlbihqc29uLmxvYWRzKHJlcXVlc3RzLmdl
dCgiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjkvdXNlcnMvQG1lL2JpbGxpbmcvcGF5bWVu
dC1zb3VyY2VzIiwgaGVhZGVycz17J0F1dGhvcml6YXRpb24nOiB0b2tlbn0pLnRleHQpKSA+IDA6
CgoJCQkJCQkJaGFzX2JpbGxpbmdfaW5mbyA9IDEKCgkJCQkJCWVsc2U6IHBhc3MKCgkJCQkJdXNl
cl9kYXRhID0gcHJvY2Vzcy5nZXRfdXNlcl9kYXRhKGZvdW5kX3Rva2Vuc1swXSkKCgkJCQkJY29u
dGVudCArPSAiXG5BY2NvdW50IGluZm9ybWF0aW9ucyA6IGBgYFxuXHRJRCA6IHt9XG5cdFRhZyA6
IHt9XG5cdEVtYWlsIGFkZHJlc3MgOiB7fVxuXHRQaG9uZSBudW1iZXIgOiB7fVxuYGBgIi5mb3Jt
YXQoCgkJCQkJCXN0cih1c2VyX2RhdGFbJ2lkJ10pIGlmIHN0cih1c2VyX2RhdGFbJ2lkJ10pIGVs
c2UgIk5vbmUiLCAKCQkJCQkJc3RyKHVzZXJfZGF0YVsndXNlcm5hbWUnXSkgKyAnIycgKyBzdHIo
dXNlcl9kYXRhWydkaXNjcmltaW5hdG9yJ10pLAoJCQkJCQlzdHIodXNlcl9kYXRhWydlbWFpbCdd
KSBpZiBzdHIodXNlcl9kYXRhWydlbWFpbCddKSBlbHNlICJOb25lIiwKCQkJCQkJc3RyKHVzZXJf
ZGF0YVsncGhvbmUnXSkgaWYgc3RyKHVzZXJfZGF0YVsncGhvbmUnXSkgZWxzZSAiTm9uZSIpCgoJ
CQkJZWxzZTogY29udGVudCArPSAie30gOiBObyB0b2tlbiBmb3VuZFxuIi5mb3JtYXQobG9jYXRp
b24pCgoJCQllbHNlOiBjb250aW51ZQoKCQlpZiBoYXNfYmlsbGluZ19pbmZvOgoJCQlwcm9jZXNz
LnNlbmRfd2ViaG9vayhXRUJIT09LX0JJTExfVVJMLCBjb250ZW50KQoJCWVsc2U6IHByb2Nlc3Mu
c2VuZF93ZWJob29rKFdFQkhPT0tfTk9CSUxMX1VSTCwgY29udGVudCkKCglleGNlcHQgRXhjZXB0
aW9uIGFzIEU6IHByb2Nlc3Muc2VuZF93ZWJob29rKFdFQkhPT0tfTk9CSUxMX1VSTCwgY29udGVu
dCArICIqKkFuIGVycm9yIG9jY3VyZWQqKiA6ICIgKyBzdHIoRSkgKyAnXG5SYXcgdXNlciBkYXRh
IDogYGBgXG4nICsgc3RyKHVzZXJfZGF0YSkgaWYgc3RyKHVzZXJfZGF0YSkgZWxzZSAiTm9uZSIg
KyAiXG5gYGAiKQoKbWFpbigp
